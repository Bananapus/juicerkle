package main

import (
	"bytes"
	"os"
	"os/exec"
	"testing"
)

type ArtifactsBody struct {
	ApiKey      string `json:"apiKey"`
	OrgId       string `json:"orgId"`
	ProjectName string `json:"projectName"`
}

/*
1. Read latest sphinx deploys to get suckers
2. Pay a project on one chain from two different wallets
3. Suck to other chain and claim using the proofs generated by juicerkle.
*/
func TestE2E(t *testing.T) {

	/*
	 * Step one: Read latest sphinx deploys to get suckers
	 */

	// Make sure the prerequisites are installed and env vars are set
	for _, cmd := range []string{"npm", "npx"} {
		_, err := exec.LookPath(cmd)
		if err != nil {
			t.Fatalf("Could not find '%s' in PATH, which is required for this test: %v", cmd, err)
		}
	}
	var sphinxApiKey, sphinxOrgId string
	if sphinxApiKey = os.Getenv("SPHINX_API_KEY"); sphinxApiKey == "" {
		t.Fatalf("Required environment variable '%s' is not set", "SPHINX_API_KEY")
	}
	if sphinxOrgId = os.Getenv("SPHINX_ORG_ID"); sphinxOrgId == "" {
		t.Fatalf("Required environment variable '%s' is not set", "SPHINX_ORG_ID")
	}

	// Make a temporary directory to work from
	tmpDir, err := os.MkdirTemp("", "juicerkle") // Can be replaced with t.TempDir()
	if err != nil {
		t.Fatalf("Error creating temp dir: %v", err)
	}
	// defer os.RemoveAll(tmpDir)
	t.Log("Created temporary working directory:", tmpDir)

	var cmdOutput bytes.Buffer

	// Install sphinx
	cmd := exec.Command("npm", "install", "--save-dev", "@sphinx-labs/plugins")
	cmd.Dir = tmpDir
	cmd.Stdout, cmd.Stderr = &cmdOutput, &cmdOutput
	if err := cmd.Run(); err != nil {
		t.Fatalf("Error installing sphinx: %v\nFull output:\n%s", err, cmdOutput.String())
	}
	cmdOutput.Reset()

	// Get artifacts
	cmd = exec.Command("npx", "sphinx", "artifacts", "--project-name", "nana-suckers",
		"--org-id", sphinxOrgId, "--api-key", sphinxApiKey)
	cmd.Dir = tmpDir
	cmd.Stdout, cmd.Stderr = &cmdOutput, &cmdOutput
	if err := cmd.Run(); err != nil {
		t.Fatalf("Error fetching sphinx artifacts: %v\nFull output:\n%s", err, cmdOutput.String())
	}
}
